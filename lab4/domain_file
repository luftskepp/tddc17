(define (domain shakey_world)
   (:requirements :strips)

   (:predicates
	(shakey ?s)
	(room ?r)
	(claw ?c)
	(box ?b)
	(lights ?l)
	(lights_on ?r)
	(small_obj ?o)	
	(adjacent	?r1   ?r2)		; can move from ?l1 directly to ?l2
	;;(wide_door	?d - door)
	;;(attached	?p - pile ?l - room)	; pile ?p attached to location ?l
	;;(belong		?k - light_switch ?l - room)	; crane ?k belongs to location ?l
	(empty ?c)
	(obj_at ?o ?r)
	(at		?s ?r)	; robot ?r is at location ?l

	
   )

(:action ACTION_1_move_room1
    [:parameters (?s ?room_from ?room_to )]

    [:precondition (and(at ?s ?room_from)(adjacent ?room_from ?room_to)
			(room ?room_to)(room ?room_from)(shakey ?s) )]
    [:effect (and(not(at ?s ?room_from))(at ?s ?room_to) )]
)

(:action ACTION_pick_up
    [:parameters (?c ?o ?r ?s)]
    [:precondition (and (shakey ?s)(claw ?c)(small_obj ?o)(room ?r)
			(at ?s ?r)(obj_at ?o ?r)(lights_on ?r)
			(empty ?c))]
    [:effect (and (not(obj_at ?o ?r))(not(empty ?c))(obj_at ?o ?c))]
)

(:action ACTION_lights_on
	[:parameters (?s ?r ?b)]
	[:precondition (and (shakey ?s)(box ?b)(room ?r)
		(at ?s ?r)(not(lights_on ?r))(obj_at ?b ?r) )]
	[:effect (lights_on ?r)]
)

(:action ACTION_put_down
    [:parameters (?c ?o ?r ?s)]
    [:precondition (and (shakey ?s)(claw ?c)(small_obj ?o)(room ?r)
		(at ?s ?r)(obj_at ?o ?c) (not(empty ?c)) )]
    [:effect (and (not(obj_at ?o ?c))(empty ?c)
	(obj_at ?o ?r))]
)

(:action ACTION_push_box
    [:parameters ( ?b ?r1 ?r2 ?s)]
    [:precondition (and (shakey ?s)(box ?b)(room ?r1)(room ?r2)
		(at ?s ?r1)(obj_at ?b ?r1) )]
    [:effect (and (not(obj_at ?b ?r1)) (obj_at ?b ?r2) 
	(not(at ?s ?r1)) (at ?s ?r2) )]
)

)
